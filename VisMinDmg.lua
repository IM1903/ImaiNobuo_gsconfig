local ui_get = ui.getlocal ui_set = ui.setlocal client_visible = client.visiblelocal entity_get_local_player = entity.get_local_playerlocal entity_get_prop = entity.get_proplocal client_world_to_screen = client.world_to_screenlocal client_screen_size = client.screen_sizelocal entity_get_players = entity.get_playerslocal entity_hitbox_position = entity.hitbox_position local entity_is_enemy = entity.is_enemylocal stored_target = nillocal old_minimum_damage = 0local enable = ui.new_checkbox("rage","aimbot","enable VisMinDmg")local using_visible_dmg = falselocal ref_minimum_damage = ui.reference("rage", "aimbot", "Minimum damage")local custom_minimum_damage = ui.new_checkbox("rage", "aimbot", "Custom minimum damage")local old_minimum_damage = ui.new_slider('rage', 'aimbot', 'Default minimum damage', 0, 126, 0)local visible_minimum_damage = ui.new_slider('rage', 'aimbot', 'Visible minimum damage', 0, 126, 0)local override_minimum_damage = ui.new_slider('rage', 'aimbot', 'Override damage', 0, 126, 0)local hotkey = ui.new_hotkey('rage', 'aimbot', 'Override Damage key')local enable_dt_hitchance = ui.new_checkbox("rage","aimbot","enable double tap hitchance")local old_hc_slider = ui.new_slider("rage","aimbot","Default hit chance",0,100,0)local dt_hc_slider = ui.new_slider("rage","aimbot","Double tap hit chance",0,100,0)local hc_ref = ui.reference("rage","aimbot","Minimum hit chance")local doubletap,doubletap_hotkey = ui.reference("rage","other","Double tap")local indicatortype = ui.new_combobox("Rage", "aimbot", "indicator Type", {"None", "Simplified", "Full"})--local key = ui.new_combobox("Rage", "Aimbot", "Force safe point key", "Always on","On hotkey","Toggle","Off hotkey")--local fsp = ui.reference("Rage","Aimbot","Force safe point")--//helperslocal function vec2_distance(f_x, f_y, t_x, t_y)	local delta_x, delta_y = f_x - t_x, f_y - t_y	return math.sqrt(delta_x*delta_x + delta_y*delta_y)endlocal function get_all_player_positions(ctx, screen_width, screen_height, enemies_only)	local player_indexes = {}	local player_positions = {}	local players = entity_get_players(enemies_only) -- true = enemies only	if #players == 0 then		return	end	for i=1, #players do		local player = players[i]		local px, py, pz = entity_get_prop(player, "m_vecOrigin")		local vz = entity_get_prop(player, "m_vecViewOffset[2]")		if pz ~= nil and vz ~= nil then            pz = pz + (vz*0.5)            local sx, sy = client_world_to_screen(ctx, px, py, pz)            if sx ~= nil and sy ~= nil then                if sx >= 0 and sx <= screen_width and sy >= 0 and sy <= screen_height then 					player_indexes[#player_indexes+1] = player                    player_positions[#player_positions+1] = {sx, sy}                end            end		end	end	return player_indexes, player_positionsendlocal function check_fov(ctx)    local screen_width, screen_height = client_screen_size()    local screen_center_x, screen_center_y = screen_width*0.5, screen_height*0.5	local fov_limit = 250 --this value is in pixels			if get_all_player_positions(ctx, screen_width, screen_height, true) == nil then		return	end	local enemy_indexes, enemy_coords = get_all_player_positions(ctx, screen_width, screen_height, true)		if #enemy_indexes <= 0 then		return true	end		if #enemy_coords == 0 then		return true	end		local closest_fov = 133337	local closest_entindex = 133337	for i=1, #enemy_coords do		local x = enemy_coords[i][1]		local y = enemy_coords[i][2]		local current_fov = vec2_distance(x, y, screen_center_x, screen_center_y)		if current_fov < closest_fov then			closest_fov = current_fov -- found a target that is closer to center of our screen			closest_entindex = enemy_indexes[i]		end	end	return closest_fov > fov_limit, closest_entindexendlocal function can_see(ent)	    for i=0, 18 do		if client_visible(entity_hitbox_position(ent, i)) then			return true		end	end	return falseendlocal function vis_min_dmg(ctx)		if not ui.get(custom_minimum_damage) then		return	end				local local_entindex = entity_get_local_player()		if entity_get_prop(local_entindex, "m_lifeState") ~= 0 then		using_visible_dmg = false				return	end		local enemy_visible, enemy_entindex = check_fov(ctx)	if enemy_entindex == nil then		ui_set(ref_minimum_damage,  ui.get(old_minimum_damage))		return	end		if enemy_visible and enemy_entindex ~= nil and stored_target ~= enemy_entindex then		stored_target = enemy_entindex	end		local visible = can_see(enemy_entindex)	if visible then		using_visible_dmg = true		ui_set(ref_minimum_damage,  ui.get(visible_minimum_damage))	else 		using_visible_dmg = false		ui_set(ref_minimum_damage,  ui.get(old_minimum_damage))	end	stored_target = enemy_entindex			endlocal function on_paint()	if not ui.get(enable_dt_hitchance) then		return	end	if ui.get(doubletap) and ui.get(doubletap_hotkey) then		ui.set(hc_ref,ui.get(dt_hc_slider))	else		ui.set(hc_ref,ui.get(old_hc_slider))	endendui.set_visible(custom_minimum_damage,false)ui.set_visible(indicatortype,false)ui.set_visible(old_minimum_damage,false)ui.set_visible(visible_minimum_damage,false)ui.set_visible(override_minimum_damage,false)ui.set_visible(hotkey,false)--ui.set_visible(key,false)ui.set_visible(old_hc_slider,false)ui.set_visible(dt_hc_slider,false)ui.set_visible(enable_dt_hitchance,false)local function on_custom_minimum_damage()	local cmd_state = ui.get(custom_minimum_damage) and ui.get(enable)	ui.set_visible(old_minimum_damage,cmd_state)	ui.set_visible(visible_minimum_damage,cmd_state)	ui.set_visible(override_minimum_damage,cmd_state)	ui.set_visible(hotkey,cmd_state)endlocal function on_enable_dt_hitchance()	local state = ui.get(enable_dt_hitchance) and ui.get(enable)	ui.set_visible(old_hc_slider,state)	ui.set_visible(dt_hc_slider,state)endlocal function on_enable()	local enable_state = ui.get(enable)	ui.set_visible(custom_minimum_damage,enable_state)	on_custom_minimum_damage()		ui.set_visible(enable_dt_hitchance,enable_state)	on_enable_dt_hitchance()		ui.set_visible(indicatortype,enable_state)	--ui.set_visible(key,enable_state)endui.set_callback(enable,on_enable)ui.set_callback(custom_minimum_damage,on_custom_minimum_damage)ui.set_callback(enable_dt_hitchance,on_enable_dt_hitchance)client.set_event_callback("paint", function(c)	if not ui.get(enable) then		return	end	if ui.get(custom_minimum_damage) then		if ui.get(hotkey) then		ui_set(ref_minimum_damage,  ui.get(override_minimum_damage))		else			vis_min_dmg()			end		end		on_paint()		if ui.get(indicatortype) == "Full" then	client.draw_indicator(c, 102,255,102, 255, "MIN DMG -> " .. ui.get(ref_minimum_damage))	elseif ui.get(indicatortype) == "Simplified" and ui.get(hotkey) then		client.draw_indicator(c, 220,220,220,255, "Override" )	end	--ui.set(fsp, ui.get(key))end)